package com.wiitel.tvhelper.data;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "APP_FLOW".
*/
public class AppFlowDao extends AbstractDao<AppFlow, Void> {

    public static final String TABLENAME = "APP_FLOW";

    /**
     * Properties of entity AppFlow.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property CurrentMonth = new Property(0, String.class, "currentMonth", false, "CURRENT_MONTH");
        public final static Property Appid = new Property(1, int.class, "appid", false, "APPID");
        public final static Property RxHistory = new Property(2, long.class, "rxHistory", false, "RX_HISTORY");
        public final static Property TxHistory = new Property(3, long.class, "txHistory", false, "TX_HISTORY");
    };


    public AppFlowDao(DaoConfig config) {
        super(config);
    }
    
    public AppFlowDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"APP_FLOW\" (" + //
                "\"CURRENT_MONTH\" TEXT NOT NULL ," + // 0: currentMonth
                "\"APPID\" INTEGER NOT NULL ," + // 1: appid
                "\"RX_HISTORY\" INTEGER NOT NULL ," + // 2: rxHistory
                "\"TX_HISTORY\" INTEGER NOT NULL );"); // 3: txHistory
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_APP_FLOW_APPID_CURRENT_MONTH ON APP_FLOW" +
                " (\"APPID\" ASC,\"CURRENT_MONTH\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"APP_FLOW\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AppFlow entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getCurrentMonth());
        stmt.bindLong(2, entity.getAppid());
        stmt.bindLong(3, entity.getRxHistory());
        stmt.bindLong(4, entity.getTxHistory());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AppFlow entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getCurrentMonth());
        stmt.bindLong(2, entity.getAppid());
        stmt.bindLong(3, entity.getRxHistory());
        stmt.bindLong(4, entity.getTxHistory());
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public AppFlow readEntity(Cursor cursor, int offset) {
        AppFlow entity = new AppFlow( //
            cursor.getString(offset + 0), // currentMonth
            cursor.getInt(offset + 1), // appid
            cursor.getLong(offset + 2), // rxHistory
            cursor.getLong(offset + 3) // txHistory
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AppFlow entity, int offset) {
        entity.setCurrentMonth(cursor.getString(offset + 0));
        entity.setAppid(cursor.getInt(offset + 1));
        entity.setRxHistory(cursor.getLong(offset + 2));
        entity.setTxHistory(cursor.getLong(offset + 3));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(AppFlow entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(AppFlow entity) {
        return null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
